// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProdServiceClient is the client API for ProdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProdServiceClient interface {
	RegisterProduct(ctx context.Context, in *RegProductReq, opts ...grpc.CallOption) (*ProdRes, error)
	RegisterProducer(ctx context.Context, in *RegProducerReq, opts ...grpc.CallOption) (*ProdRes, error)
	RegisterGroup(ctx context.Context, in *RegGroupReq, opts ...grpc.CallOption) (*ProdRes, error)
	GetListOfProducts(ctx context.Context, in *EmptyProdReq, opts ...grpc.CallOption) (*GetListOfProductsRes, error)
	GetListOfProducers(ctx context.Context, in *EmptyProdReq, opts ...grpc.CallOption) (*GetListOfProducersRes, error)
	GetListOfGroups(ctx context.Context, in *EmptyProdReq, opts ...grpc.CallOption) (*GetListOfGroupsRes, error)
	DeleteProducer(ctx context.Context, in *DeleteProducerReq, opts ...grpc.CallOption) (*ProdRes, error)
	ChangeProducerStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ProdRes, error)
}

type prodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProdServiceClient(cc grpc.ClientConnInterface) ProdServiceClient {
	return &prodServiceClient{cc}
}

func (c *prodServiceClient) RegisterProduct(ctx context.Context, in *RegProductReq, opts ...grpc.CallOption) (*ProdRes, error) {
	out := new(ProdRes)
	err := c.cc.Invoke(ctx, "/proto.ProdService/RegisterProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) RegisterProducer(ctx context.Context, in *RegProducerReq, opts ...grpc.CallOption) (*ProdRes, error) {
	out := new(ProdRes)
	err := c.cc.Invoke(ctx, "/proto.ProdService/RegisterProducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) RegisterGroup(ctx context.Context, in *RegGroupReq, opts ...grpc.CallOption) (*ProdRes, error) {
	out := new(ProdRes)
	err := c.cc.Invoke(ctx, "/proto.ProdService/RegisterGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) GetListOfProducts(ctx context.Context, in *EmptyProdReq, opts ...grpc.CallOption) (*GetListOfProductsRes, error) {
	out := new(GetListOfProductsRes)
	err := c.cc.Invoke(ctx, "/proto.ProdService/GetListOfProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) GetListOfProducers(ctx context.Context, in *EmptyProdReq, opts ...grpc.CallOption) (*GetListOfProducersRes, error) {
	out := new(GetListOfProducersRes)
	err := c.cc.Invoke(ctx, "/proto.ProdService/GetListOfProducers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) GetListOfGroups(ctx context.Context, in *EmptyProdReq, opts ...grpc.CallOption) (*GetListOfGroupsRes, error) {
	out := new(GetListOfGroupsRes)
	err := c.cc.Invoke(ctx, "/proto.ProdService/GetListOfGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) DeleteProducer(ctx context.Context, in *DeleteProducerReq, opts ...grpc.CallOption) (*ProdRes, error) {
	out := new(ProdRes)
	err := c.cc.Invoke(ctx, "/proto.ProdService/DeleteProducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prodServiceClient) ChangeProducerStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ProdRes, error) {
	out := new(ProdRes)
	err := c.cc.Invoke(ctx, "/proto.ProdService/ChangeProducerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProdServiceServer is the server API for ProdService service.
// All implementations must embed UnimplementedProdServiceServer
// for forward compatibility
type ProdServiceServer interface {
	RegisterProduct(context.Context, *RegProductReq) (*ProdRes, error)
	RegisterProducer(context.Context, *RegProducerReq) (*ProdRes, error)
	RegisterGroup(context.Context, *RegGroupReq) (*ProdRes, error)
	GetListOfProducts(context.Context, *EmptyProdReq) (*GetListOfProductsRes, error)
	GetListOfProducers(context.Context, *EmptyProdReq) (*GetListOfProducersRes, error)
	GetListOfGroups(context.Context, *EmptyProdReq) (*GetListOfGroupsRes, error)
	DeleteProducer(context.Context, *DeleteProducerReq) (*ProdRes, error)
	ChangeProducerStatus(context.Context, *ChangeStatusReq) (*ProdRes, error)
	mustEmbedUnimplementedProdServiceServer()
}

// UnimplementedProdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProdServiceServer struct {
}

func (UnimplementedProdServiceServer) RegisterProduct(context.Context, *RegProductReq) (*ProdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProduct not implemented")
}
func (UnimplementedProdServiceServer) RegisterProducer(context.Context, *RegProducerReq) (*ProdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProducer not implemented")
}
func (UnimplementedProdServiceServer) RegisterGroup(context.Context, *RegGroupReq) (*ProdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGroup not implemented")
}
func (UnimplementedProdServiceServer) GetListOfProducts(context.Context, *EmptyProdReq) (*GetListOfProductsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfProducts not implemented")
}
func (UnimplementedProdServiceServer) GetListOfProducers(context.Context, *EmptyProdReq) (*GetListOfProducersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfProducers not implemented")
}
func (UnimplementedProdServiceServer) GetListOfGroups(context.Context, *EmptyProdReq) (*GetListOfGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfGroups not implemented")
}
func (UnimplementedProdServiceServer) DeleteProducer(context.Context, *DeleteProducerReq) (*ProdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProducer not implemented")
}
func (UnimplementedProdServiceServer) ChangeProducerStatus(context.Context, *ChangeStatusReq) (*ProdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProducerStatus not implemented")
}
func (UnimplementedProdServiceServer) mustEmbedUnimplementedProdServiceServer() {}

// UnsafeProdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProdServiceServer will
// result in compilation errors.
type UnsafeProdServiceServer interface {
	mustEmbedUnimplementedProdServiceServer()
}

func RegisterProdServiceServer(s grpc.ServiceRegistrar, srv ProdServiceServer) {
	s.RegisterService(&ProdService_ServiceDesc, srv)
}

func _ProdService_RegisterProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).RegisterProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProdService/RegisterProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).RegisterProduct(ctx, req.(*RegProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_RegisterProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegProducerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).RegisterProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProdService/RegisterProducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).RegisterProducer(ctx, req.(*RegProducerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_RegisterGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).RegisterGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProdService/RegisterGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).RegisterGroup(ctx, req.(*RegGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_GetListOfProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyProdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).GetListOfProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProdService/GetListOfProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).GetListOfProducts(ctx, req.(*EmptyProdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_GetListOfProducers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyProdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).GetListOfProducers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProdService/GetListOfProducers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).GetListOfProducers(ctx, req.(*EmptyProdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_GetListOfGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyProdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).GetListOfGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProdService/GetListOfGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).GetListOfGroups(ctx, req.(*EmptyProdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_DeleteProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProducerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).DeleteProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProdService/DeleteProducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).DeleteProducer(ctx, req.(*DeleteProducerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProdService_ChangeProducerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProdServiceServer).ChangeProducerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ProdService/ChangeProducerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProdServiceServer).ChangeProducerStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProdService_ServiceDesc is the grpc.ServiceDesc for ProdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ProdService",
	HandlerType: (*ProdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterProduct",
			Handler:    _ProdService_RegisterProduct_Handler,
		},
		{
			MethodName: "RegisterProducer",
			Handler:    _ProdService_RegisterProducer_Handler,
		},
		{
			MethodName: "RegisterGroup",
			Handler:    _ProdService_RegisterGroup_Handler,
		},
		{
			MethodName: "GetListOfProducts",
			Handler:    _ProdService_GetListOfProducts_Handler,
		},
		{
			MethodName: "GetListOfProducers",
			Handler:    _ProdService_GetListOfProducers_Handler,
		},
		{
			MethodName: "GetListOfGroups",
			Handler:    _ProdService_GetListOfGroups_Handler,
		},
		{
			MethodName: "DeleteProducer",
			Handler:    _ProdService_DeleteProducer_Handler,
		},
		{
			MethodName: "ChangeProducerStatus",
			Handler:    _ProdService_ChangeProducerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prod_service.proto",
}
