// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type ordersProductsViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *ordersProductsViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("orders_products").
func (v *ordersProductsViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *ordersProductsViewType) Columns() []string {
	return []string{
		"order_id",
		"product_id",
		"amount",
		"discount",
		"price",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *ordersProductsViewType) NewStruct() reform.Struct {
	return new(OrdersProducts)
}

// OrdersProductsView represents orders_products view or table in SQL database.
var OrdersProductsView = &ordersProductsViewType{
	s: parse.StructInfo{
		Type:    "OrdersProducts",
		SQLName: "orders_products",
		Fields: []parse.FieldInfo{
			{Name: "OrderID", Type: "*int32", Column: "order_id"},
			{Name: "ProductID", Type: "*int32", Column: "product_id"},
			{Name: "Amount", Type: "*int32", Column: "amount"},
			{Name: "Discount", Type: "*int32", Column: "discount"},
			{Name: "Price", Type: "*float64", Column: "price"},
		},
		PKFieldIndex: -1,
	},
	z: new(OrdersProducts).Values(),
}

// String returns a string representation of this struct or record.
func (s OrdersProducts) String() string {
	res := make([]string, 5)
	res[0] = "OrderID: " + reform.Inspect(s.OrderID, true)
	res[1] = "ProductID: " + reform.Inspect(s.ProductID, true)
	res[2] = "Amount: " + reform.Inspect(s.Amount, true)
	res[3] = "Discount: " + reform.Inspect(s.Discount, true)
	res[4] = "Price: " + reform.Inspect(s.Price, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *OrdersProducts) Values() []interface{} {
	return []interface{}{
		s.OrderID,
		s.ProductID,
		s.Amount,
		s.Discount,
		s.Price,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *OrdersProducts) Pointers() []interface{} {
	return []interface{}{
		&s.OrderID,
		&s.ProductID,
		&s.Amount,
		&s.Discount,
		&s.Price,
	}
}

// View returns View object for that struct.
func (s *OrdersProducts) View() reform.View {
	return OrdersProductsView
}

// check interfaces
var (
	_ reform.View   = OrdersProductsView
	_ reform.Struct = (*OrdersProducts)(nil)
	_ fmt.Stringer  = (*OrdersProducts)(nil)
)

func init() {
	parse.AssertUpToDate(&OrdersProductsView.s, new(OrdersProducts))
}
