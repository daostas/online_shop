// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type usersTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *usersTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("users").
func (v *usersTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *usersTableType) Columns() []string {
	return []string{
		"user_id",
		"user_name",
		"number",
		"email",
		"dob",
		"address",
		"user_password",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *usersTableType) NewStruct() reform.Struct {
	return new(Users)
}

// NewRecord makes a new record for that table.
func (v *usersTableType) NewRecord() reform.Record {
	return new(Users)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *usersTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// UsersTable represents users view or table in SQL database.
var UsersTable = &usersTableType{
	s: parse.StructInfo{
		Type:    "Users",
		SQLName: "users",
		Fields: []parse.FieldInfo{
			{Name: "UserID", Type: "int32", Column: "user_id"},
			{Name: "UserName", Type: "*string", Column: "user_name"},
			{Name: "Number", Type: "*string", Column: "number"},
			{Name: "Email", Type: "*string", Column: "email"},
			{Name: "Dob", Type: "*time.Time", Column: "dob"},
			{Name: "Address", Type: "*string", Column: "address"},
			{Name: "UserPassword", Type: "string", Column: "user_password"},
		},
		PKFieldIndex: 0,
	},
	z: new(Users).Values(),
}

// String returns a string representation of this struct or record.
func (s Users) String() string {
	res := make([]string, 7)
	res[0] = "UserID: " + reform.Inspect(s.UserID, true)
	res[1] = "UserName: " + reform.Inspect(s.UserName, true)
	res[2] = "Number: " + reform.Inspect(s.Number, true)
	res[3] = "Email: " + reform.Inspect(s.Email, true)
	res[4] = "Dob: " + reform.Inspect(s.Dob, true)
	res[5] = "Address: " + reform.Inspect(s.Address, true)
	res[6] = "UserPassword: " + reform.Inspect(s.UserPassword, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Users) Values() []interface{} {
	return []interface{}{
		s.UserID,
		s.UserName,
		s.Number,
		s.Email,
		s.Dob,
		s.Address,
		s.UserPassword,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Users) Pointers() []interface{} {
	return []interface{}{
		&s.UserID,
		&s.UserName,
		&s.Number,
		&s.Email,
		&s.Dob,
		&s.Address,
		&s.UserPassword,
	}
}

// View returns View object for that struct.
func (s *Users) View() reform.View {
	return UsersTable
}

// Table returns Table object for that record.
func (s *Users) Table() reform.Table {
	return UsersTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Users) PKValue() interface{} {
	return s.UserID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Users) PKPointer() interface{} {
	return &s.UserID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Users) HasPK() bool {
	return s.UserID != UsersTable.z[UsersTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.UserID = pk.
func (s *Users) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = UsersTable
	_ reform.Struct = (*Users)(nil)
	_ reform.Table  = UsersTable
	_ reform.Record = (*Users)(nil)
	_ fmt.Stringer  = (*Users)(nil)
)

func init() {
	parse.AssertUpToDate(&UsersTable.s, new(Users))
}
