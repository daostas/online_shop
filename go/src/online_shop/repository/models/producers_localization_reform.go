// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type producersLocalizationViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *producersLocalizationViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("producers_localization").
func (v *producersLocalizationViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *producersLocalizationViewType) Columns() []string {
	return []string{
		"producer_id",
		"lang_id",
		"title",
		"description",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *producersLocalizationViewType) NewStruct() reform.Struct {
	return new(ProducersLocalization)
}

// ProducersLocalizationView represents producers_localization view or table in SQL database.
var ProducersLocalizationView = &producersLocalizationViewType{
	s: parse.StructInfo{
		Type:    "ProducersLocalization",
		SQLName: "producers_localization",
		Fields: []parse.FieldInfo{
			{Name: "ProducerID", Type: "*int32", Column: "producer_id"},
			{Name: "LangID", Type: "*int32", Column: "lang_id"},
			{Name: "Title", Type: "string", Column: "title"},
			{Name: "Description", Type: "*string", Column: "description"},
		},
		PKFieldIndex: -1,
	},
	z: new(ProducersLocalization).Values(),
}

// String returns a string representation of this struct or record.
func (s ProducersLocalization) String() string {
	res := make([]string, 4)
	res[0] = "ProducerID: " + reform.Inspect(s.ProducerID, true)
	res[1] = "LangID: " + reform.Inspect(s.LangID, true)
	res[2] = "Title: " + reform.Inspect(s.Title, true)
	res[3] = "Description: " + reform.Inspect(s.Description, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ProducersLocalization) Values() []interface{} {
	return []interface{}{
		s.ProducerID,
		s.LangID,
		s.Title,
		s.Description,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ProducersLocalization) Pointers() []interface{} {
	return []interface{}{
		&s.ProducerID,
		&s.LangID,
		&s.Title,
		&s.Description,
	}
}

// View returns View object for that struct.
func (s *ProducersLocalization) View() reform.View {
	return ProducersLocalizationView
}

// check interfaces
var (
	_ reform.View   = ProducersLocalizationView
	_ reform.Struct = (*ProducersLocalization)(nil)
	_ fmt.Stringer  = (*ProducersLocalization)(nil)
)

func init() {
	parse.AssertUpToDate(&ProducersLocalizationView.s, new(ProducersLocalization))
}
