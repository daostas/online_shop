// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type productsTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *productsTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("products").
func (v *productsTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *productsTableType) Columns() []string {
	return []string{
		"product_id",
		"parent_id",
		"model",
		"sku",
		"upc",
		"jan",
		"usbn",
		"mpn",
		"photos",
		"amount",
		"rating",
		"curreunt_discount",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *productsTableType) NewStruct() reform.Struct {
	return new(Products)
}

// NewRecord makes a new record for that table.
func (v *productsTableType) NewRecord() reform.Record {
	return new(Products)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *productsTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ProductsTable represents products view or table in SQL database.
var ProductsTable = &productsTableType{
	s: parse.StructInfo{
		Type:    "Products",
		SQLName: "products",
		Fields: []parse.FieldInfo{
			{Name: "ProductID", Type: "int32", Column: "product_id"},
			{Name: "ParentID", Type: "*int32", Column: "parent_id"},
			{Name: "Model", Type: "*string", Column: "model"},
			{Name: "Sku", Type: "*string", Column: "sku"},
			{Name: "Upc", Type: "*string", Column: "upc"},
			{Name: "Jan", Type: "*string", Column: "jan"},
			{Name: "Usbn", Type: "*string", Column: "usbn"},
			{Name: "Mpn", Type: "*string", Column: "mpn"},
			{Name: "Photos", Type: "[]uint8", Column: "photos"},
			{Name: "Amount", Type: "*int32", Column: "amount"},
			{Name: "Rating", Type: "*float64", Column: "rating"},
			{Name: "CurreuntDiscount", Type: "*int32", Column: "curreunt_discount"},
		},
		PKFieldIndex: 0,
	},
	z: new(Products).Values(),
}

// String returns a string representation of this struct or record.
func (s Products) String() string {
	res := make([]string, 12)
	res[0] = "ProductID: " + reform.Inspect(s.ProductID, true)
	res[1] = "ParentID: " + reform.Inspect(s.ParentID, true)
	res[2] = "Model: " + reform.Inspect(s.Model, true)
	res[3] = "Sku: " + reform.Inspect(s.Sku, true)
	res[4] = "Upc: " + reform.Inspect(s.Upc, true)
	res[5] = "Jan: " + reform.Inspect(s.Jan, true)
	res[6] = "Usbn: " + reform.Inspect(s.Usbn, true)
	res[7] = "Mpn: " + reform.Inspect(s.Mpn, true)
	res[8] = "Photos: " + reform.Inspect(s.Photos, true)
	res[9] = "Amount: " + reform.Inspect(s.Amount, true)
	res[10] = "Rating: " + reform.Inspect(s.Rating, true)
	res[11] = "CurreuntDiscount: " + reform.Inspect(s.CurreuntDiscount, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Products) Values() []interface{} {
	return []interface{}{
		s.ProductID,
		s.ParentID,
		s.Model,
		s.Sku,
		s.Upc,
		s.Jan,
		s.Usbn,
		s.Mpn,
		s.Photos,
		s.Amount,
		s.Rating,
		s.CurreuntDiscount,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Products) Pointers() []interface{} {
	return []interface{}{
		&s.ProductID,
		&s.ParentID,
		&s.Model,
		&s.Sku,
		&s.Upc,
		&s.Jan,
		&s.Usbn,
		&s.Mpn,
		&s.Photos,
		&s.Amount,
		&s.Rating,
		&s.CurreuntDiscount,
	}
}

// View returns View object for that struct.
func (s *Products) View() reform.View {
	return ProductsTable
}

// Table returns Table object for that record.
func (s *Products) Table() reform.Table {
	return ProductsTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Products) PKValue() interface{} {
	return s.ProductID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Products) PKPointer() interface{} {
	return &s.ProductID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Products) HasPK() bool {
	return s.ProductID != ProductsTable.z[ProductsTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.ProductID = pk.
func (s *Products) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = ProductsTable
	_ reform.Struct = (*Products)(nil)
	_ reform.Table  = ProductsTable
	_ reform.Record = (*Products)(nil)
	_ fmt.Stringer  = (*Products)(nil)
)

func init() {
	parse.AssertUpToDate(&ProductsTable.s, new(Products))
}
