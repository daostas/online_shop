// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type ordersTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *ordersTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("orders").
func (v *ordersTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *ordersTableType) Columns() []string {
	return []string{
		"order_id",
		"user_id",
		"address",
		"status",
		"payment_details",
		"sum",
		"created_at",
		"updated_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *ordersTableType) NewStruct() reform.Struct {
	return new(Orders)
}

// NewRecord makes a new record for that table.
func (v *ordersTableType) NewRecord() reform.Record {
	return new(Orders)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *ordersTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// OrdersTable represents orders view or table in SQL database.
var OrdersTable = &ordersTableType{
	s: parse.StructInfo{
		Type:    "Orders",
		SQLName: "orders",
		Fields: []parse.FieldInfo{
			{Name: "OrderID", Type: "int32", Column: "order_id"},
			{Name: "UserID", Type: "*int32", Column: "user_id"},
			{Name: "Address", Type: "*string", Column: "address"},
			{Name: "Status", Type: "*string", Column: "status"},
			{Name: "PaymentDetails", Type: "[]uint8", Column: "payment_details"},
			{Name: "Sum", Type: "*float64", Column: "sum"},
			{Name: "CreatedAt", Type: "[]uint8", Column: "created_at"},
			{Name: "UpdatedAt", Type: "[]uint8", Column: "updated_at"},
		},
		PKFieldIndex: 0,
	},
	z: new(Orders).Values(),
}

// String returns a string representation of this struct or record.
func (s Orders) String() string {
	res := make([]string, 8)
	res[0] = "OrderID: " + reform.Inspect(s.OrderID, true)
	res[1] = "UserID: " + reform.Inspect(s.UserID, true)
	res[2] = "Address: " + reform.Inspect(s.Address, true)
	res[3] = "Status: " + reform.Inspect(s.Status, true)
	res[4] = "PaymentDetails: " + reform.Inspect(s.PaymentDetails, true)
	res[5] = "Sum: " + reform.Inspect(s.Sum, true)
	res[6] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[7] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Orders) Values() []interface{} {
	return []interface{}{
		s.OrderID,
		s.UserID,
		s.Address,
		s.Status,
		s.PaymentDetails,
		s.Sum,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Orders) Pointers() []interface{} {
	return []interface{}{
		&s.OrderID,
		&s.UserID,
		&s.Address,
		&s.Status,
		&s.PaymentDetails,
		&s.Sum,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *Orders) View() reform.View {
	return OrdersTable
}

// Table returns Table object for that record.
func (s *Orders) Table() reform.Table {
	return OrdersTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Orders) PKValue() interface{} {
	return s.OrderID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Orders) PKPointer() interface{} {
	return &s.OrderID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Orders) HasPK() bool {
	return s.OrderID != OrdersTable.z[OrdersTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.OrderID = pk.
func (s *Orders) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = OrdersTable
	_ reform.Struct = (*Orders)(nil)
	_ reform.Table  = OrdersTable
	_ reform.Record = (*Orders)(nil)
	_ fmt.Stringer  = (*Orders)(nil)
)

func init() {
	parse.AssertUpToDate(&OrdersTable.s, new(Orders))
}
