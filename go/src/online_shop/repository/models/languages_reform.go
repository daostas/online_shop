// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type languagesTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *languagesTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("languages").
func (v *languagesTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *languagesTableType) Columns() []string {
	return []string{
		"lang_id",
		"code",
		"image",
		"locale",
		"lang_name",
		"sort_order",
		"status",
		"created_at",
		"updated_at",
	}
}

// NewStruct makes a new struct for that view or table.
func (v *languagesTableType) NewStruct() reform.Struct {
	return new(Languages)
}

// NewRecord makes a new record for that table.
func (v *languagesTableType) NewRecord() reform.Record {
	return new(Languages)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *languagesTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// LanguagesTable represents languages view or table in SQL database.
var LanguagesTable = &languagesTableType{
	s: parse.StructInfo{
		Type:    "Languages",
		SQLName: "languages",
		Fields: []parse.FieldInfo{
			{Name: "LangID", Type: "int32", Column: "lang_id"},
			{Name: "Code", Type: "string", Column: "code"},
			{Name: "Image", Type: "*string", Column: "image"},
			{Name: "Locale", Type: "string", Column: "locale"},
			{Name: "LangName", Type: "string", Column: "lang_name"},
			{Name: "SortOrder", Type: "int32", Column: "sort_order"},
			{Name: "Status", Type: "bool", Column: "status"},
			{Name: "CreatedAt", Type: "time.Time", Column: "created_at"},
			{Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"},
		},
		PKFieldIndex: 0,
	},
	z: new(Languages).Values(),
}

// String returns a string representation of this struct or record.
func (s Languages) String() string {
	res := make([]string, 9)
	res[0] = "LangID: " + reform.Inspect(s.LangID, true)
	res[1] = "Code: " + reform.Inspect(s.Code, true)
	res[2] = "Image: " + reform.Inspect(s.Image, true)
	res[3] = "Locale: " + reform.Inspect(s.Locale, true)
	res[4] = "LangName: " + reform.Inspect(s.LangName, true)
	res[5] = "SortOrder: " + reform.Inspect(s.SortOrder, true)
	res[6] = "Status: " + reform.Inspect(s.Status, true)
	res[7] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[8] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Languages) Values() []interface{} {
	return []interface{}{
		s.LangID,
		s.Code,
		s.Image,
		s.Locale,
		s.LangName,
		s.SortOrder,
		s.Status,
		s.CreatedAt,
		s.UpdatedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Languages) Pointers() []interface{} {
	return []interface{}{
		&s.LangID,
		&s.Code,
		&s.Image,
		&s.Locale,
		&s.LangName,
		&s.SortOrder,
		&s.Status,
		&s.CreatedAt,
		&s.UpdatedAt,
	}
}

// View returns View object for that struct.
func (s *Languages) View() reform.View {
	return LanguagesTable
}

// Table returns Table object for that record.
func (s *Languages) Table() reform.Table {
	return LanguagesTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Languages) PKValue() interface{} {
	return s.LangID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Languages) PKPointer() interface{} {
	return &s.LangID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Languages) HasPK() bool {
	return s.LangID != LanguagesTable.z[LanguagesTable.s.PKFieldIndex]
}

// SetPK sets record primary key, if possible.
//
// Deprecated: prefer direct field assignment where possible: s.LangID = pk.
func (s *Languages) SetPK(pk interface{}) {
	reform.SetPK(s, pk)
}

// check interfaces
var (
	_ reform.View   = LanguagesTable
	_ reform.Struct = (*Languages)(nil)
	_ reform.Table  = LanguagesTable
	_ reform.Record = (*Languages)(nil)
	_ fmt.Stringer  = (*Languages)(nil)
)

func init() {
	parse.AssertUpToDate(&LanguagesTable.s, new(Languages))
}
