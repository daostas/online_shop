// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminProducersClient is the client API for AdminProducers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminProducersClient interface {
	RegisterProducer(ctx context.Context, in *RegProducerReq, opts ...grpc.CallOption) (*AdminRes, error)
	GetListOfProducers(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error)
	ChangeProducerStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error)
}

type adminProducersClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminProducersClient(cc grpc.ClientConnInterface) AdminProducersClient {
	return &adminProducersClient{cc}
}

func (c *adminProducersClient) RegisterProducer(ctx context.Context, in *RegProducerReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminProducers/RegisterProducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProducersClient) GetListOfProducers(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error) {
	out := new(DataTableRes)
	err := c.cc.Invoke(ctx, "/proto.AdminProducers/GetListOfProducers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProducersClient) ChangeProducerStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error) {
	out := new(ChangeStatusRes)
	err := c.cc.Invoke(ctx, "/proto.AdminProducers/ChangeProducerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminProducersServer is the server API for AdminProducers service.
// All implementations must embed UnimplementedAdminProducersServer
// for forward compatibility
type AdminProducersServer interface {
	RegisterProducer(context.Context, *RegProducerReq) (*AdminRes, error)
	GetListOfProducers(context.Context, *DataTableReq) (*DataTableRes, error)
	ChangeProducerStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error)
	mustEmbedUnimplementedAdminProducersServer()
}

// UnimplementedAdminProducersServer must be embedded to have forward compatible implementations.
type UnimplementedAdminProducersServer struct {
}

func (UnimplementedAdminProducersServer) RegisterProducer(context.Context, *RegProducerReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProducer not implemented")
}
func (UnimplementedAdminProducersServer) GetListOfProducers(context.Context, *DataTableReq) (*DataTableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfProducers not implemented")
}
func (UnimplementedAdminProducersServer) ChangeProducerStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProducerStatus not implemented")
}
func (UnimplementedAdminProducersServer) mustEmbedUnimplementedAdminProducersServer() {}

// UnsafeAdminProducersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminProducersServer will
// result in compilation errors.
type UnsafeAdminProducersServer interface {
	mustEmbedUnimplementedAdminProducersServer()
}

func RegisterAdminProducersServer(s grpc.ServiceRegistrar, srv AdminProducersServer) {
	s.RegisterService(&AdminProducers_ServiceDesc, srv)
}

func _AdminProducers_RegisterProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegProducerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProducersServer).RegisterProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminProducers/RegisterProducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProducersServer).RegisterProducer(ctx, req.(*RegProducerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProducers_GetListOfProducers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProducersServer).GetListOfProducers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminProducers/GetListOfProducers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProducersServer).GetListOfProducers(ctx, req.(*DataTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProducers_ChangeProducerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProducersServer).ChangeProducerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminProducers/ChangeProducerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProducersServer).ChangeProducerStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminProducers_ServiceDesc is the grpc.ServiceDesc for AdminProducers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminProducers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AdminProducers",
	HandlerType: (*AdminProducersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterProducer",
			Handler:    _AdminProducers_RegisterProducer_Handler,
		},
		{
			MethodName: "GetListOfProducers",
			Handler:    _AdminProducers_GetListOfProducers_Handler,
		},
		{
			MethodName: "ChangeProducerStatus",
			Handler:    _AdminProducers_ChangeProducerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}

// AdminProductsClient is the client API for AdminProducts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminProductsClient interface {
	RegisterProduct(ctx context.Context, in *RegProductReq, opts ...grpc.CallOption) (*AdminRes, error)
	GetListOfProducts(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error)
	GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductRes, error)
	ChangeProductsStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error)
	AddProductToGroup(ctx context.Context, in *AddToGroupReq, opts ...grpc.CallOption) (*AdminRes, error)
	AddProductToProducer(ctx context.Context, in *AddToProducerReq, opts ...grpc.CallOption) (*AdminRes, error)
}

type adminProductsClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminProductsClient(cc grpc.ClientConnInterface) AdminProductsClient {
	return &adminProductsClient{cc}
}

func (c *adminProductsClient) RegisterProduct(ctx context.Context, in *RegProductReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminProducts/RegisterProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProductsClient) GetListOfProducts(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error) {
	out := new(DataTableRes)
	err := c.cc.Invoke(ctx, "/proto.AdminProducts/GetListOfProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProductsClient) GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductRes, error) {
	out := new(GetProductRes)
	err := c.cc.Invoke(ctx, "/proto.AdminProducts/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProductsClient) ChangeProductsStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error) {
	out := new(ChangeStatusRes)
	err := c.cc.Invoke(ctx, "/proto.AdminProducts/ChangeProductsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProductsClient) AddProductToGroup(ctx context.Context, in *AddToGroupReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminProducts/AddProductToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminProductsClient) AddProductToProducer(ctx context.Context, in *AddToProducerReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminProducts/AddProductToProducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminProductsServer is the server API for AdminProducts service.
// All implementations must embed UnimplementedAdminProductsServer
// for forward compatibility
type AdminProductsServer interface {
	RegisterProduct(context.Context, *RegProductReq) (*AdminRes, error)
	GetListOfProducts(context.Context, *DataTableReq) (*DataTableRes, error)
	GetProduct(context.Context, *GetProductReq) (*GetProductRes, error)
	ChangeProductsStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error)
	AddProductToGroup(context.Context, *AddToGroupReq) (*AdminRes, error)
	AddProductToProducer(context.Context, *AddToProducerReq) (*AdminRes, error)
	mustEmbedUnimplementedAdminProductsServer()
}

// UnimplementedAdminProductsServer must be embedded to have forward compatible implementations.
type UnimplementedAdminProductsServer struct {
}

func (UnimplementedAdminProductsServer) RegisterProduct(context.Context, *RegProductReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProduct not implemented")
}
func (UnimplementedAdminProductsServer) GetListOfProducts(context.Context, *DataTableReq) (*DataTableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfProducts not implemented")
}
func (UnimplementedAdminProductsServer) GetProduct(context.Context, *GetProductReq) (*GetProductRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedAdminProductsServer) ChangeProductsStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProductsStatus not implemented")
}
func (UnimplementedAdminProductsServer) AddProductToGroup(context.Context, *AddToGroupReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToGroup not implemented")
}
func (UnimplementedAdminProductsServer) AddProductToProducer(context.Context, *AddToProducerReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToProducer not implemented")
}
func (UnimplementedAdminProductsServer) mustEmbedUnimplementedAdminProductsServer() {}

// UnsafeAdminProductsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminProductsServer will
// result in compilation errors.
type UnsafeAdminProductsServer interface {
	mustEmbedUnimplementedAdminProductsServer()
}

func RegisterAdminProductsServer(s grpc.ServiceRegistrar, srv AdminProductsServer) {
	s.RegisterService(&AdminProducts_ServiceDesc, srv)
}

func _AdminProducts_RegisterProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProductsServer).RegisterProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminProducts/RegisterProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProductsServer).RegisterProduct(ctx, req.(*RegProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProducts_GetListOfProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProductsServer).GetListOfProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminProducts/GetListOfProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProductsServer).GetListOfProducts(ctx, req.(*DataTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProducts_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProductsServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminProducts/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProductsServer).GetProduct(ctx, req.(*GetProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProducts_ChangeProductsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProductsServer).ChangeProductsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminProducts/ChangeProductsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProductsServer).ChangeProductsStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProducts_AddProductToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProductsServer).AddProductToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminProducts/AddProductToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProductsServer).AddProductToGroup(ctx, req.(*AddToGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminProducts_AddProductToProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToProducerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminProductsServer).AddProductToProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminProducts/AddProductToProducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminProductsServer).AddProductToProducer(ctx, req.(*AddToProducerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminProducts_ServiceDesc is the grpc.ServiceDesc for AdminProducts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminProducts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AdminProducts",
	HandlerType: (*AdminProductsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterProduct",
			Handler:    _AdminProducts_RegisterProduct_Handler,
		},
		{
			MethodName: "GetListOfProducts",
			Handler:    _AdminProducts_GetListOfProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _AdminProducts_GetProduct_Handler,
		},
		{
			MethodName: "ChangeProductsStatus",
			Handler:    _AdminProducts_ChangeProductsStatus_Handler,
		},
		{
			MethodName: "AddProductToGroup",
			Handler:    _AdminProducts_AddProductToGroup_Handler,
		},
		{
			MethodName: "AddProductToProducer",
			Handler:    _AdminProducts_AddProductToProducer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}

// AdminGroupsClient is the client API for AdminGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminGroupsClient interface {
	RegisterGroup(ctx context.Context, in *RegGroupReq, opts ...grpc.CallOption) (*AdminRes, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*AdminRes, error)
	GetListOfGroups(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error)
	ChangeGroupsStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error)
}

type adminGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminGroupsClient(cc grpc.ClientConnInterface) AdminGroupsClient {
	return &adminGroupsClient{cc}
}

func (c *adminGroupsClient) RegisterGroup(ctx context.Context, in *RegGroupReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminGroups/RegisterGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGroupsClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminGroups/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGroupsClient) GetListOfGroups(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error) {
	out := new(DataTableRes)
	err := c.cc.Invoke(ctx, "/proto.AdminGroups/GetListOfGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGroupsClient) ChangeGroupsStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error) {
	out := new(ChangeStatusRes)
	err := c.cc.Invoke(ctx, "/proto.AdminGroups/ChangeGroupsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminGroupsServer is the server API for AdminGroups service.
// All implementations must embed UnimplementedAdminGroupsServer
// for forward compatibility
type AdminGroupsServer interface {
	RegisterGroup(context.Context, *RegGroupReq) (*AdminRes, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*AdminRes, error)
	GetListOfGroups(context.Context, *DataTableReq) (*DataTableRes, error)
	ChangeGroupsStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error)
	mustEmbedUnimplementedAdminGroupsServer()
}

// UnimplementedAdminGroupsServer must be embedded to have forward compatible implementations.
type UnimplementedAdminGroupsServer struct {
}

func (UnimplementedAdminGroupsServer) RegisterGroup(context.Context, *RegGroupReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGroup not implemented")
}
func (UnimplementedAdminGroupsServer) UpdateGroup(context.Context, *UpdateGroupReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedAdminGroupsServer) GetListOfGroups(context.Context, *DataTableReq) (*DataTableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfGroups not implemented")
}
func (UnimplementedAdminGroupsServer) ChangeGroupsStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroupsStatus not implemented")
}
func (UnimplementedAdminGroupsServer) mustEmbedUnimplementedAdminGroupsServer() {}

// UnsafeAdminGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminGroupsServer will
// result in compilation errors.
type UnsafeAdminGroupsServer interface {
	mustEmbedUnimplementedAdminGroupsServer()
}

func RegisterAdminGroupsServer(s grpc.ServiceRegistrar, srv AdminGroupsServer) {
	s.RegisterService(&AdminGroups_ServiceDesc, srv)
}

func _AdminGroups_RegisterGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGroupsServer).RegisterGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminGroups/RegisterGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGroupsServer).RegisterGroup(ctx, req.(*RegGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGroups_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGroupsServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminGroups/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGroupsServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGroups_GetListOfGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGroupsServer).GetListOfGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminGroups/GetListOfGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGroupsServer).GetListOfGroups(ctx, req.(*DataTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGroups_ChangeGroupsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGroupsServer).ChangeGroupsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminGroups/ChangeGroupsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGroupsServer).ChangeGroupsStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminGroups_ServiceDesc is the grpc.ServiceDesc for AdminGroups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminGroups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AdminGroups",
	HandlerType: (*AdminGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGroup",
			Handler:    _AdminGroups_RegisterGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AdminGroups_UpdateGroup_Handler,
		},
		{
			MethodName: "GetListOfGroups",
			Handler:    _AdminGroups_GetListOfGroups_Handler,
		},
		{
			MethodName: "ChangeGroupsStatus",
			Handler:    _AdminGroups_ChangeGroupsStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}

// AdminLanguagesClient is the client API for AdminLanguages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminLanguagesClient interface {
	NewLanguage(ctx context.Context, in *NewLangReq, opts ...grpc.CallOption) (*AdminRes, error)
	GetListOfLanguages(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error)
	ChangeLanguageStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error)
}

type adminLanguagesClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminLanguagesClient(cc grpc.ClientConnInterface) AdminLanguagesClient {
	return &adminLanguagesClient{cc}
}

func (c *adminLanguagesClient) NewLanguage(ctx context.Context, in *NewLangReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminLanguages/NewLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLanguagesClient) GetListOfLanguages(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error) {
	out := new(DataTableRes)
	err := c.cc.Invoke(ctx, "/proto.AdminLanguages/GetListOfLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminLanguagesClient) ChangeLanguageStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error) {
	out := new(ChangeStatusRes)
	err := c.cc.Invoke(ctx, "/proto.AdminLanguages/ChangeLanguageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminLanguagesServer is the server API for AdminLanguages service.
// All implementations must embed UnimplementedAdminLanguagesServer
// for forward compatibility
type AdminLanguagesServer interface {
	NewLanguage(context.Context, *NewLangReq) (*AdminRes, error)
	GetListOfLanguages(context.Context, *DataTableReq) (*DataTableRes, error)
	ChangeLanguageStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error)
	mustEmbedUnimplementedAdminLanguagesServer()
}

// UnimplementedAdminLanguagesServer must be embedded to have forward compatible implementations.
type UnimplementedAdminLanguagesServer struct {
}

func (UnimplementedAdminLanguagesServer) NewLanguage(context.Context, *NewLangReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewLanguage not implemented")
}
func (UnimplementedAdminLanguagesServer) GetListOfLanguages(context.Context, *DataTableReq) (*DataTableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfLanguages not implemented")
}
func (UnimplementedAdminLanguagesServer) ChangeLanguageStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLanguageStatus not implemented")
}
func (UnimplementedAdminLanguagesServer) mustEmbedUnimplementedAdminLanguagesServer() {}

// UnsafeAdminLanguagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminLanguagesServer will
// result in compilation errors.
type UnsafeAdminLanguagesServer interface {
	mustEmbedUnimplementedAdminLanguagesServer()
}

func RegisterAdminLanguagesServer(s grpc.ServiceRegistrar, srv AdminLanguagesServer) {
	s.RegisterService(&AdminLanguages_ServiceDesc, srv)
}

func _AdminLanguages_NewLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLangReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLanguagesServer).NewLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminLanguages/NewLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLanguagesServer).NewLanguage(ctx, req.(*NewLangReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLanguages_GetListOfLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLanguagesServer).GetListOfLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminLanguages/GetListOfLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLanguagesServer).GetListOfLanguages(ctx, req.(*DataTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminLanguages_ChangeLanguageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminLanguagesServer).ChangeLanguageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminLanguages/ChangeLanguageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminLanguagesServer).ChangeLanguageStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminLanguages_ServiceDesc is the grpc.ServiceDesc for AdminLanguages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminLanguages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AdminLanguages",
	HandlerType: (*AdminLanguagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewLanguage",
			Handler:    _AdminLanguages_NewLanguage_Handler,
		},
		{
			MethodName: "GetListOfLanguages",
			Handler:    _AdminLanguages_GetListOfLanguages_Handler,
		},
		{
			MethodName: "ChangeLanguageStatus",
			Handler:    _AdminLanguages_ChangeLanguageStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}

// AdminSettingServiceClient is the client API for AdminSettingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminSettingServiceClient interface {
	SetDefaultLanguage(ctx context.Context, in *SetDefaultLanguageReq, opts ...grpc.CallOption) (*AdminRes, error)
}

type adminSettingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminSettingServiceClient(cc grpc.ClientConnInterface) AdminSettingServiceClient {
	return &adminSettingServiceClient{cc}
}

func (c *adminSettingServiceClient) SetDefaultLanguage(ctx context.Context, in *SetDefaultLanguageReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminSettingService/SetDefaultLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminSettingServiceServer is the server API for AdminSettingService service.
// All implementations must embed UnimplementedAdminSettingServiceServer
// for forward compatibility
type AdminSettingServiceServer interface {
	SetDefaultLanguage(context.Context, *SetDefaultLanguageReq) (*AdminRes, error)
	mustEmbedUnimplementedAdminSettingServiceServer()
}

// UnimplementedAdminSettingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminSettingServiceServer struct {
}

func (UnimplementedAdminSettingServiceServer) SetDefaultLanguage(context.Context, *SetDefaultLanguageReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultLanguage not implemented")
}
func (UnimplementedAdminSettingServiceServer) mustEmbedUnimplementedAdminSettingServiceServer() {}

// UnsafeAdminSettingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminSettingServiceServer will
// result in compilation errors.
type UnsafeAdminSettingServiceServer interface {
	mustEmbedUnimplementedAdminSettingServiceServer()
}

func RegisterAdminSettingServiceServer(s grpc.ServiceRegistrar, srv AdminSettingServiceServer) {
	s.RegisterService(&AdminSettingService_ServiceDesc, srv)
}

func _AdminSettingService_SetDefaultLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultLanguageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminSettingServiceServer).SetDefaultLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminSettingService/SetDefaultLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminSettingServiceServer).SetDefaultLanguage(ctx, req.(*SetDefaultLanguageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminSettingService_ServiceDesc is the grpc.ServiceDesc for AdminSettingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminSettingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AdminSettingService",
	HandlerType: (*AdminSettingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDefaultLanguage",
			Handler:    _AdminSettingService_SetDefaultLanguage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}

// AdminParametrsClient is the client API for AdminParametrs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminParametrsClient interface {
	RegisterParametr(ctx context.Context, in *RegParametrReq, opts ...grpc.CallOption) (*AdminRes, error)
	UpdateParametr(ctx context.Context, in *UpdateParametrReq, opts ...grpc.CallOption) (*AdminRes, error)
	GetListOfParametrs(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error)
	ChangeParametrsStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error)
	AddParametrToProduct(ctx context.Context, in *AddParametrToProductReq, opts ...grpc.CallOption) (*AdminRes, error)
	AddParametrToGroup(ctx context.Context, in *AddParametrToGroupReq, opts ...grpc.CallOption) (*AdminRes, error)
}

type adminParametrsClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminParametrsClient(cc grpc.ClientConnInterface) AdminParametrsClient {
	return &adminParametrsClient{cc}
}

func (c *adminParametrsClient) RegisterParametr(ctx context.Context, in *RegParametrReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminParametrs/RegisterParametr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminParametrsClient) UpdateParametr(ctx context.Context, in *UpdateParametrReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminParametrs/UpdateParametr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminParametrsClient) GetListOfParametrs(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error) {
	out := new(DataTableRes)
	err := c.cc.Invoke(ctx, "/proto.AdminParametrs/GetListOfParametrs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminParametrsClient) ChangeParametrsStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error) {
	out := new(ChangeStatusRes)
	err := c.cc.Invoke(ctx, "/proto.AdminParametrs/ChangeParametrsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminParametrsClient) AddParametrToProduct(ctx context.Context, in *AddParametrToProductReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminParametrs/AddParametrToProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminParametrsClient) AddParametrToGroup(ctx context.Context, in *AddParametrToGroupReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminParametrs/AddParametrToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminParametrsServer is the server API for AdminParametrs service.
// All implementations must embed UnimplementedAdminParametrsServer
// for forward compatibility
type AdminParametrsServer interface {
	RegisterParametr(context.Context, *RegParametrReq) (*AdminRes, error)
	UpdateParametr(context.Context, *UpdateParametrReq) (*AdminRes, error)
	GetListOfParametrs(context.Context, *DataTableReq) (*DataTableRes, error)
	ChangeParametrsStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error)
	AddParametrToProduct(context.Context, *AddParametrToProductReq) (*AdminRes, error)
	AddParametrToGroup(context.Context, *AddParametrToGroupReq) (*AdminRes, error)
	mustEmbedUnimplementedAdminParametrsServer()
}

// UnimplementedAdminParametrsServer must be embedded to have forward compatible implementations.
type UnimplementedAdminParametrsServer struct {
}

func (UnimplementedAdminParametrsServer) RegisterParametr(context.Context, *RegParametrReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterParametr not implemented")
}
func (UnimplementedAdminParametrsServer) UpdateParametr(context.Context, *UpdateParametrReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParametr not implemented")
}
func (UnimplementedAdminParametrsServer) GetListOfParametrs(context.Context, *DataTableReq) (*DataTableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfParametrs not implemented")
}
func (UnimplementedAdminParametrsServer) ChangeParametrsStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeParametrsStatus not implemented")
}
func (UnimplementedAdminParametrsServer) AddParametrToProduct(context.Context, *AddParametrToProductReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParametrToProduct not implemented")
}
func (UnimplementedAdminParametrsServer) AddParametrToGroup(context.Context, *AddParametrToGroupReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParametrToGroup not implemented")
}
func (UnimplementedAdminParametrsServer) mustEmbedUnimplementedAdminParametrsServer() {}

// UnsafeAdminParametrsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminParametrsServer will
// result in compilation errors.
type UnsafeAdminParametrsServer interface {
	mustEmbedUnimplementedAdminParametrsServer()
}

func RegisterAdminParametrsServer(s grpc.ServiceRegistrar, srv AdminParametrsServer) {
	s.RegisterService(&AdminParametrs_ServiceDesc, srv)
}

func _AdminParametrs_RegisterParametr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegParametrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminParametrsServer).RegisterParametr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminParametrs/RegisterParametr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminParametrsServer).RegisterParametr(ctx, req.(*RegParametrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminParametrs_UpdateParametr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParametrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminParametrsServer).UpdateParametr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminParametrs/UpdateParametr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminParametrsServer).UpdateParametr(ctx, req.(*UpdateParametrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminParametrs_GetListOfParametrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminParametrsServer).GetListOfParametrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminParametrs/GetListOfParametrs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminParametrsServer).GetListOfParametrs(ctx, req.(*DataTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminParametrs_ChangeParametrsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminParametrsServer).ChangeParametrsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminParametrs/ChangeParametrsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminParametrsServer).ChangeParametrsStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminParametrs_AddParametrToProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParametrToProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminParametrsServer).AddParametrToProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminParametrs/AddParametrToProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminParametrsServer).AddParametrToProduct(ctx, req.(*AddParametrToProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminParametrs_AddParametrToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParametrToGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminParametrsServer).AddParametrToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminParametrs/AddParametrToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminParametrsServer).AddParametrToGroup(ctx, req.(*AddParametrToGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminParametrs_ServiceDesc is the grpc.ServiceDesc for AdminParametrs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminParametrs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AdminParametrs",
	HandlerType: (*AdminParametrsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterParametr",
			Handler:    _AdminParametrs_RegisterParametr_Handler,
		},
		{
			MethodName: "UpdateParametr",
			Handler:    _AdminParametrs_UpdateParametr_Handler,
		},
		{
			MethodName: "GetListOfParametrs",
			Handler:    _AdminParametrs_GetListOfParametrs_Handler,
		},
		{
			MethodName: "ChangeParametrsStatus",
			Handler:    _AdminParametrs_ChangeParametrsStatus_Handler,
		},
		{
			MethodName: "AddParametrToProduct",
			Handler:    _AdminParametrs_AddParametrToProduct_Handler,
		},
		{
			MethodName: "AddParametrToGroup",
			Handler:    _AdminParametrs_AddParametrToGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}
