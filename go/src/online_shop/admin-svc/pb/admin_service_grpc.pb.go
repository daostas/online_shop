// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProducersClient is the client API for Producers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProducersClient interface {
	RegisterProducer(ctx context.Context, in *RegProducerReq, opts ...grpc.CallOption) (*AdminRes, error)
	GetListOfProducers(ctx context.Context, in *EmptyAdminReq, opts ...grpc.CallOption) (*GetListOfProducersRes, error)
	ChangeProducerStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*AdminRes, error)
}

type producersClient struct {
	cc grpc.ClientConnInterface
}

func NewProducersClient(cc grpc.ClientConnInterface) ProducersClient {
	return &producersClient{cc}
}

func (c *producersClient) RegisterProducer(ctx context.Context, in *RegProducerReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.Producers/RegisterProducer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producersClient) GetListOfProducers(ctx context.Context, in *EmptyAdminReq, opts ...grpc.CallOption) (*GetListOfProducersRes, error) {
	out := new(GetListOfProducersRes)
	err := c.cc.Invoke(ctx, "/proto.Producers/GetListOfProducers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *producersClient) ChangeProducerStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.Producers/ChangeProducerStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProducersServer is the server API for Producers service.
// All implementations must embed UnimplementedProducersServer
// for forward compatibility
type ProducersServer interface {
	RegisterProducer(context.Context, *RegProducerReq) (*AdminRes, error)
	GetListOfProducers(context.Context, *EmptyAdminReq) (*GetListOfProducersRes, error)
	ChangeProducerStatus(context.Context, *ChangeStatusReq) (*AdminRes, error)
	mustEmbedUnimplementedProducersServer()
}

// UnimplementedProducersServer must be embedded to have forward compatible implementations.
type UnimplementedProducersServer struct {
}

func (UnimplementedProducersServer) RegisterProducer(context.Context, *RegProducerReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProducer not implemented")
}
func (UnimplementedProducersServer) GetListOfProducers(context.Context, *EmptyAdminReq) (*GetListOfProducersRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfProducers not implemented")
}
func (UnimplementedProducersServer) ChangeProducerStatus(context.Context, *ChangeStatusReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProducerStatus not implemented")
}
func (UnimplementedProducersServer) mustEmbedUnimplementedProducersServer() {}

// UnsafeProducersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProducersServer will
// result in compilation errors.
type UnsafeProducersServer interface {
	mustEmbedUnimplementedProducersServer()
}

func RegisterProducersServer(s grpc.ServiceRegistrar, srv ProducersServer) {
	s.RegisterService(&Producers_ServiceDesc, srv)
}

func _Producers_RegisterProducer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegProducerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducersServer).RegisterProducer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Producers/RegisterProducer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducersServer).RegisterProducer(ctx, req.(*RegProducerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Producers_GetListOfProducers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyAdminReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducersServer).GetListOfProducers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Producers/GetListOfProducers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducersServer).GetListOfProducers(ctx, req.(*EmptyAdminReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Producers_ChangeProducerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProducersServer).ChangeProducerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Producers/ChangeProducerStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProducersServer).ChangeProducerStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Producers_ServiceDesc is the grpc.ServiceDesc for Producers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Producers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Producers",
	HandlerType: (*ProducersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterProducer",
			Handler:    _Producers_RegisterProducer_Handler,
		},
		{
			MethodName: "GetListOfProducers",
			Handler:    _Producers_GetListOfProducers_Handler,
		},
		{
			MethodName: "ChangeProducerStatus",
			Handler:    _Producers_ChangeProducerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}

// ProductsClient is the client API for Products service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsClient interface {
	RegisterProduct(ctx context.Context, in *RegProductReq, opts ...grpc.CallOption) (*AdminRes, error)
	GetListOfProducts(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error)
	ChangeProductsStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*AdminRes, error)
}

type productsClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsClient(cc grpc.ClientConnInterface) ProductsClient {
	return &productsClient{cc}
}

func (c *productsClient) RegisterProduct(ctx context.Context, in *RegProductReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.Products/RegisterProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetListOfProducts(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error) {
	out := new(DataTableRes)
	err := c.cc.Invoke(ctx, "/proto.Products/GetListOfProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) ChangeProductsStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.Products/ChangeProductsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsServer is the server API for Products service.
// All implementations must embed UnimplementedProductsServer
// for forward compatibility
type ProductsServer interface {
	RegisterProduct(context.Context, *RegProductReq) (*AdminRes, error)
	GetListOfProducts(context.Context, *DataTableReq) (*DataTableRes, error)
	ChangeProductsStatus(context.Context, *ChangeStatusReq) (*AdminRes, error)
	mustEmbedUnimplementedProductsServer()
}

// UnimplementedProductsServer must be embedded to have forward compatible implementations.
type UnimplementedProductsServer struct {
}

func (UnimplementedProductsServer) RegisterProduct(context.Context, *RegProductReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProduct not implemented")
}
func (UnimplementedProductsServer) GetListOfProducts(context.Context, *DataTableReq) (*DataTableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfProducts not implemented")
}
func (UnimplementedProductsServer) ChangeProductsStatus(context.Context, *ChangeStatusReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProductsStatus not implemented")
}
func (UnimplementedProductsServer) mustEmbedUnimplementedProductsServer() {}

// UnsafeProductsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsServer will
// result in compilation errors.
type UnsafeProductsServer interface {
	mustEmbedUnimplementedProductsServer()
}

func RegisterProductsServer(s grpc.ServiceRegistrar, srv ProductsServer) {
	s.RegisterService(&Products_ServiceDesc, srv)
}

func _Products_RegisterProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).RegisterProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Products/RegisterProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).RegisterProduct(ctx, req.(*RegProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetListOfProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetListOfProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Products/GetListOfProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetListOfProducts(ctx, req.(*DataTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_ChangeProductsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).ChangeProductsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Products/ChangeProductsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).ChangeProductsStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Products_ServiceDesc is the grpc.ServiceDesc for Products service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Products_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Products",
	HandlerType: (*ProductsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterProduct",
			Handler:    _Products_RegisterProduct_Handler,
		},
		{
			MethodName: "GetListOfProducts",
			Handler:    _Products_GetListOfProducts_Handler,
		},
		{
			MethodName: "ChangeProductsStatus",
			Handler:    _Products_ChangeProductsStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}

// AdminGroupsClient is the client API for AdminGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminGroupsClient interface {
	RegisterGroup(ctx context.Context, in *RegGroupReq, opts ...grpc.CallOption) (*AdminRes, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*AdminRes, error)
	GetListOfGroups(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error)
	ChangeGroupsStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error)
}

type adminGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminGroupsClient(cc grpc.ClientConnInterface) AdminGroupsClient {
	return &adminGroupsClient{cc}
}

func (c *adminGroupsClient) RegisterGroup(ctx context.Context, in *RegGroupReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminGroups/RegisterGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGroupsClient) UpdateGroup(ctx context.Context, in *UpdateGroupReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.AdminGroups/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGroupsClient) GetListOfGroups(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error) {
	out := new(DataTableRes)
	err := c.cc.Invoke(ctx, "/proto.AdminGroups/GetListOfGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGroupsClient) ChangeGroupsStatus(ctx context.Context, in *ChangeStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error) {
	out := new(ChangeStatusRes)
	err := c.cc.Invoke(ctx, "/proto.AdminGroups/ChangeGroupsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminGroupsServer is the server API for AdminGroups service.
// All implementations must embed UnimplementedAdminGroupsServer
// for forward compatibility
type AdminGroupsServer interface {
	RegisterGroup(context.Context, *RegGroupReq) (*AdminRes, error)
	UpdateGroup(context.Context, *UpdateGroupReq) (*AdminRes, error)
	GetListOfGroups(context.Context, *DataTableReq) (*DataTableRes, error)
	ChangeGroupsStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error)
	mustEmbedUnimplementedAdminGroupsServer()
}

// UnimplementedAdminGroupsServer must be embedded to have forward compatible implementations.
type UnimplementedAdminGroupsServer struct {
}

func (UnimplementedAdminGroupsServer) RegisterGroup(context.Context, *RegGroupReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGroup not implemented")
}
func (UnimplementedAdminGroupsServer) UpdateGroup(context.Context, *UpdateGroupReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedAdminGroupsServer) GetListOfGroups(context.Context, *DataTableReq) (*DataTableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfGroups not implemented")
}
func (UnimplementedAdminGroupsServer) ChangeGroupsStatus(context.Context, *ChangeStatusReq) (*ChangeStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeGroupsStatus not implemented")
}
func (UnimplementedAdminGroupsServer) mustEmbedUnimplementedAdminGroupsServer() {}

// UnsafeAdminGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminGroupsServer will
// result in compilation errors.
type UnsafeAdminGroupsServer interface {
	mustEmbedUnimplementedAdminGroupsServer()
}

func RegisterAdminGroupsServer(s grpc.ServiceRegistrar, srv AdminGroupsServer) {
	s.RegisterService(&AdminGroups_ServiceDesc, srv)
}

func _AdminGroups_RegisterGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGroupsServer).RegisterGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminGroups/RegisterGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGroupsServer).RegisterGroup(ctx, req.(*RegGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGroups_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGroupsServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminGroups/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGroupsServer).UpdateGroup(ctx, req.(*UpdateGroupReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGroups_GetListOfGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGroupsServer).GetListOfGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminGroups/GetListOfGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGroupsServer).GetListOfGroups(ctx, req.(*DataTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGroups_ChangeGroupsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGroupsServer).ChangeGroupsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AdminGroups/ChangeGroupsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGroupsServer).ChangeGroupsStatus(ctx, req.(*ChangeStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminGroups_ServiceDesc is the grpc.ServiceDesc for AdminGroups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminGroups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AdminGroups",
	HandlerType: (*AdminGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterGroup",
			Handler:    _AdminGroups_RegisterGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _AdminGroups_UpdateGroup_Handler,
		},
		{
			MethodName: "GetListOfGroups",
			Handler:    _AdminGroups_GetListOfGroups_Handler,
		},
		{
			MethodName: "ChangeGroupsStatus",
			Handler:    _AdminGroups_ChangeGroupsStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}

// LanguagesClient is the client API for Languages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguagesClient interface {
	NewLanguage(ctx context.Context, in *NewLangReq, opts ...grpc.CallOption) (*AdminRes, error)
	GetListOfLanguages(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error)
	ChangeLanguageStatus(ctx context.Context, in *ChangeLanguageStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error)
}

type languagesClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguagesClient(cc grpc.ClientConnInterface) LanguagesClient {
	return &languagesClient{cc}
}

func (c *languagesClient) NewLanguage(ctx context.Context, in *NewLangReq, opts ...grpc.CallOption) (*AdminRes, error) {
	out := new(AdminRes)
	err := c.cc.Invoke(ctx, "/proto.Languages/NewLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesClient) GetListOfLanguages(ctx context.Context, in *DataTableReq, opts ...grpc.CallOption) (*DataTableRes, error) {
	out := new(DataTableRes)
	err := c.cc.Invoke(ctx, "/proto.Languages/GetListOfLanguages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languagesClient) ChangeLanguageStatus(ctx context.Context, in *ChangeLanguageStatusReq, opts ...grpc.CallOption) (*ChangeStatusRes, error) {
	out := new(ChangeStatusRes)
	err := c.cc.Invoke(ctx, "/proto.Languages/ChangeLanguageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguagesServer is the server API for Languages service.
// All implementations must embed UnimplementedLanguagesServer
// for forward compatibility
type LanguagesServer interface {
	NewLanguage(context.Context, *NewLangReq) (*AdminRes, error)
	GetListOfLanguages(context.Context, *DataTableReq) (*DataTableRes, error)
	ChangeLanguageStatus(context.Context, *ChangeLanguageStatusReq) (*ChangeStatusRes, error)
	mustEmbedUnimplementedLanguagesServer()
}

// UnimplementedLanguagesServer must be embedded to have forward compatible implementations.
type UnimplementedLanguagesServer struct {
}

func (UnimplementedLanguagesServer) NewLanguage(context.Context, *NewLangReq) (*AdminRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewLanguage not implemented")
}
func (UnimplementedLanguagesServer) GetListOfLanguages(context.Context, *DataTableReq) (*DataTableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfLanguages not implemented")
}
func (UnimplementedLanguagesServer) ChangeLanguageStatus(context.Context, *ChangeLanguageStatusReq) (*ChangeStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLanguageStatus not implemented")
}
func (UnimplementedLanguagesServer) mustEmbedUnimplementedLanguagesServer() {}

// UnsafeLanguagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguagesServer will
// result in compilation errors.
type UnsafeLanguagesServer interface {
	mustEmbedUnimplementedLanguagesServer()
}

func RegisterLanguagesServer(s grpc.ServiceRegistrar, srv LanguagesServer) {
	s.RegisterService(&Languages_ServiceDesc, srv)
}

func _Languages_NewLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLangReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServer).NewLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Languages/NewLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServer).NewLanguage(ctx, req.(*NewLangReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Languages_GetListOfLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServer).GetListOfLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Languages/GetListOfLanguages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServer).GetListOfLanguages(ctx, req.(*DataTableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Languages_ChangeLanguageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLanguageStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguagesServer).ChangeLanguageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Languages/ChangeLanguageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguagesServer).ChangeLanguageStatus(ctx, req.(*ChangeLanguageStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Languages_ServiceDesc is the grpc.ServiceDesc for Languages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Languages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Languages",
	HandlerType: (*LanguagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewLanguage",
			Handler:    _Languages_NewLanguage_Handler,
		},
		{
			MethodName: "GetListOfLanguages",
			Handler:    _Languages_GetListOfLanguages_Handler,
		},
		{
			MethodName: "ChangeLanguageStatus",
			Handler:    _Languages_ChangeLanguageStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin_service.proto",
}
